The connector lifecycle model consists of the following stages:

image::images/connector-lifecycle.png[]

[[on-board]]
=== Stage 1: On-Board

This first stage consists of legal matters involving the development of a connector for MuleSoft. This stage includes a learning phase of the default framework for developing connectors for the Anypointâ„¢ Connector DevKit.

==== Legal Engagement

Both sides, MuleSoft and a Service Integrator (_SI_), state the guidelines and expected product deliverables before starting the development stage.


==== Learning Anypoint Connector DevKit

Anypoint Connector DevKit is the default tool for developing Anypoint connectors. It provides a vast set of features to help you develop and mantain your connector. Features include, but are not limited to:

. Visual design and implementation using Anypoint Studio with an Eclipse-oriented interface that simplifies and speeds up development.
. Maven support for development and building.
. Connector development and packaging tools.
. Authentication support for multiple types of authentication using OAuth and basic authentication.
. DataSense support to acquire metadata in design time.
. Extensive testing capability.
. Examples, training, and support to ease startup.
. Batch, query pagination, and DataSense Query Language support.

The following are a set of useful links as a starting point:

* http://training.mulesoft.com/instructor-led-training/connector-development-essentials-private-class-ilt[Connector Development Essentials]
* http://www.mulesoft.org/documentation/display/current/Anypoint+Connector+DevKit[Official DevKit Documentation]
* http://mulesoft.github.io/mule-cookbook-tutorial[DevKit Tutorial]
* http://forums.mulesoft.com/spaces/35/anypoint-connector-devkit.html[Community Forum]

[[_development]]
=== Stage 2: Development

The development stage is one of two major phases, mostly occurring in the development team side. Since the MuleSoft team has relatively low control over this stage, MuleSoft requires every developer to follow a strict set of practices, which we call *Mandatory Practices*.

==== Design Specification Review

The _design specification review_ phase, within the development stage, primarily assists developers and designers to clarify the functional behavior of the connector, provides extensive use cases, ranging from normal to border-cases, and includes an overall architecture design. MuleSoft strongly recommended that developers, as well as designers, consider this step mandatory, taking into consideration the
link:files/designSpecificationTemplate.html[Design Specification Template].

The Design Specification Template is one of the two _Exit Criteria Documents_ from the development stage, needed by the MuleSoft team. The second document is the link:files/CertificationChecklist_connector_name-connector_version.xlsx[Certification Checklist Document], which ensures that you accomplish every mandatory practice and complete all deliverables.

Due to Interoperability QA Guidelines, this checklist has the associated link:files/connector_name-connector_version_ManualInteroperabilityTestSuiteTemplate.xlsx[Manual Interoperability Test Run] document.

[[_mandatory_practices]]
==== Mandatory Practices

The Mandatory Practices assure an overall product quality, ranging from coding standards to documentation. The MuleSoft team requires that you strictly follow every practice and produce the required deliverables, including release notes and a user guide. The following mandatory practices are detailed in following sections of this document.

* <<_coding_standars_and_best_practices,Coding Standards and Best Practices>>
* <<_static_code_analysis_and_coverage,Static Code Analysis and Coverage>>
* <<_functional_tests_automation,Functional Tests Automation>>
* <<_anypoint_studio_iteroperability_testing,Anypoint Studio Interoperability Testing>>
* <<_cloudhub_interoperability_testing,CloudHub Interoperability Testing>>
* <<_documentation,Documentation & Release Notes>>

[[_certification]]
=== Stage 3: Certification

The certification stage occurs mostly in the MuleSoft side. This stage includes different high-level objectives, such as:

. Automated code scan
. Manual code review and black box testing
. Manual and automated tests review
. Repository structure review
. Documentation review
. Runtime-compatibility review
. Static code analysis

The certification stage requires different prerequisites, because a wide set of code properties are checked and validated. These properties include GitHub credentials, Maven dependencies, and code versioning, among others.


==== Prerequisites

Prerequisites to be satisfied:

* *Design Specification Template Approved:* The Design Specification template has been approved and all suggested corrections have been taken into consideration by the development team.

* *Source Code Access and Sandbox Credentials:* As part of the certification process, the MuleSoft team internally runs and continues tests execution, and runs a set of code inspections to validate the quality of the connector. The following actions are required:
** GitHub account with read access must be granted to the user _connectors-cert-ci_ (connectors-cert-ci at mulesoft dot com).
** If required, provide the sandbox credentials used for tests execution.
** Create a release branch containing all the bug fixes produced during the certification process. This follows the naming convention "release/v<version-number>". After the certification process   completes, all changes are merged into the master branch and a tag, with all the changes, needed to be created. MuleSoft strongly recommendeds that you follow GitFlow branching practices.

* *Maven Dependencies:*
** The connector must be a final version: No SNAPSHOTS are allowed.
** SNAPSHOT dependencies are not allowed.
** External dependencies need to be located in well-known public repositories.

* *Presentation Demo:* The objective of this demo is to go over the functional aspects of the connector, the overview of the system to be connected, and the underlying integration technologies (REST/SOAP/SDK). The audience of this meeting are Product Managers, Connectors Engineers, Leads, and QA staff.

* *Complete the <<certification-checklist,Certification Checklist>>*

* *Connector Documentation:* Access to your connector documentation is required.

* *Versioning:* The Connector must follow the following versioning scheme. Given a version number MAJOR.MINOR.PATCH, only increment a MAJOR version when you make incompatible API changes; increment a MINOR version when you add functionality in a backwards-compatible manner; and increment a PATCH version when you make backwards-compatible bug fixes.

==== Certification

After completing all previous steps, MuleSoft starts the certification process, which is an iterative process. MuleSoft reports different recommendations, which need to be completed by the connector development team, otherwise certification fails.

 MuleSoft defines a tentative starting date for the certification process, where MuleSoft recommends that your team allocates different time windows, so as to respond to our recommendations. After you resolve and implement all requirements, the certification process ends. However, if there is no active engagement in solving the proposed recommendations within a seven-day period, the whole certification process suspends and a new tentative starting date is defined.

MuleSoft provides a CloudBees dedicated account (http://www.cloudbees.com) that you can use to monitor test execution and static code analysis reports.

The main communication channel between the MuleSoft team and your team is the MuleSoft connector forum, part of the Mulesoft forum community.


// @Todo: Define new releases criteria.


==== Results


* *Support Training:* Mule support team provides T1 support and helps you isolate the issue and identify if the issue is a Mule issue or a connector issue.

* *Upload of certified connectors to https://www.mulesoft.com/exchange[Anypoint Exchange]. After your connector passes certification, MuleSoft sends you an estimated date for when your connector will appear in Anypoint Exchange. As part of this process, the following information need to be provided:

** High level description of the connector. The https://www.mulesoft.com/exchange#!/salesforce-integration-connector?types=connector[SalesForce connector] can be used as a template example.

** URL to release notes.

** URL to functional documentation.

** URL to Anypoint Connector DevKit generated documentation.

[[publishing]]
=== Stage 4: Publishing

The final stage in the connector lifecycle model is publishing, which MuleSoft carries out. After the certification process successfully completes, the connector deployes and publishes in the Mulesoft Anypoint Exchange.

[[re-certification]]
=== Release Re-Certification

Mule ESB and Anypoint Studio have a release cycle of three month, where MuleSoft assures that previously published connectors are compatible with new releases. Due to class-loading issues and data-mapping problems, already published connectors might not work in new Mule ESB versions. Therefore, prior to Mule ESB and Anypoint Studio releases, MuleSoft runs regression tests to assure full forward compatibility.

If regression testing fails, it is up to the connector development team to decide whether the connector supports or not newer versions of Mule ESB and Anypoint Studio.
