[[_devkit_standars_best_practices]]
=== DevKit Standards and Best Practices

==== DataMapper Compliance
//todo: should this be removed or edited? if edited, how so?
To have the best experience in Anypoint™ Studio, connectors must be DataMapper-compliant. To achieve this, all operations must follow these recommendations.

Any argument, returned or received, must be one of the following data types:

* Map
* POJO
* List<Map>
* List<String>
* List<POJO>
* List<List<String>>

These types must be part of the method signature so that DataMapper can auto-recognize the types in its mapping UI.

[IMPORTANT]
====
Only use a map if you cannot use a POJO.

Use a map only if your data:

. Is schema-less, for example if created using MongoDB.
. Has user customizable schemas, if created with Salesforce.
. Has unknown content.
====


|===
|Good Example| Bad Example

|List<Map> query()| List<DBObject> query
|void send(Invoice invoice)| void send(Object object)
|Invoice getInvoice(String id)| Object get(String id, Class typeToCreate) +

All operations must have a single object to take input from DataMapper. The object must be a single object, not multiple arguments. This object is called the Primary argument.
|===
|===
|Good Example| Bad Example

|void createInvoice(Invoice invoice)| createInvoice(Header header, List<LineItems> lineItems)
|void upsert(List<Map> sobjects, String type, String externalFieldId)| N/A - Multiple arguments are still needed!
|GetTaxResult getTax(TaxRequest request)|
`public GetTaxResult getTax(String companyCode,
    AvalaraDocumentType docType,
    @Optional String docCode,
    Date docDate,
    @Optional String salespersonCode,
    String customerCode,
    @Optional String customerUsageType,
    String discount,
    @Optional String purchaseOrderNo)`
|===


==== Java Version

A connector needs to define its target JDK version according to its compatibility with Mule runtimes. Mule runtimes 3.5.X must use Java 1.6, Mule runtimes 3.6.X must use Java 1.7, Mule runtimes 3.7.X must use Java 1.7 and Mule runtimes 3.8.X must use Java 1.7/1.8. This can be achieved by overwriting the POM property `<jdk.version>` with the desired version.

==== Annotations
If you have multiple arguments, annotate the Primary argument with:

`@Default("#[payload]")`

This way DataMapper knows which argument in the operation to use for mapping.

==== No Warning During Compilation

DevKit does a intensive analysis of the used annotations and semantic of them in conjunction with others. It’s important the code is free of compilation warning to help on the maintainability of the code and to follow good practices.

==== DevKit Generated API Doc

Connector documentation is composed of two different types of documentation: *DevKit Generated API Doc* and the *Connector Documentation*.

DevKit API Doc is automatically generated by DevKit using the JavaDoc documentation in the connector class. This is one of the most important information sources used by the developer when using the connector.

// @Todo: Hernan - What do you suggest ?. LDAP. We need to explain how to check the generated documentation.
// Recommendation with Samples

==== Connector Code Convention

We provide a file with a recommended code styling format for connectors.  This is an important aspect of the connector code quality and most of the connectors use this standard format.
This style can be imported in *Eclipse, Studio and IntelliJ*.

Download the Connector Style Format link:files/connectors-style-convention.xml[here].

==== @Config Friendly Name Conventions

In order to provide consistency across all the connectors, Global Element default name should a follow a convention:

. If there is one single configuration, "Configuration" should be used as friendlyName
. If there is more than one configuration, the following convention should be followed:
.. "OAuth 2.0" for OAuth configurations
.. In other cases, use a brief description following the same terminology used in the system to integrate.

GlobalElement name is configured using the friendlyName attribute of the configuration class.
//todo more explanation on what the GlobalElement name is
