[[_maven_conventions_and_setup]]
=== Maven Conventions and Setup

The following section describes set of conventions and best practices to follow at the time to define your connector Maven project structure.

==== Best Practices
A connector tested in an isolated environment might not work in a Mule environment. Therefore, different constrains apply:

* Follow http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html[Maven default name conventions].
* Do not overwrite org.mule.tools.devkit:mule-devkit-parent properties.
* Do not reference SNAPSHOT dependencies in plugins or dependencies.

==== Multi Module Layout
In large Maven projects, it is a common practice to divide the project in submodules. This means you may end up with a module for your connector and other modules for utils, commons or other kind of modularized source code that will be consumed by the connector.

//This means you can have separated dependencies, different plugins and a different build configuration, no weird single jar references and consistent versioning. Also separate testing and easy-to-extend structure.

Consider the following use-case:

**Project parent pom**

[source, xml]
----
<groupId>org.mule.modules</groupId>
<artifactId>mule-module-sample-connector-parent</artifactId>
<version>1.0.0-SNAPSHOT</version>
<name>Mule Sample Connector Parent</name>
<packaging>pom</packaging>

<modules>
    <module>some-util-lib</module>
    <module>rehusable-service-adapter</module>
    <module>mule-connector-sample</module>
</modules>
----

In your connector's module pom.xml:

**Connector sibling dependencies**

[source, xml]
----
<dependencies>
    <dependency>
        <groupId>org.mule.modules</groupId>
        <artifactId>some-util-lib</artifactId>
        <version>1.0.0-SNAPSHOT</version>
    </dependency>
    <dependency>
        <groupId>org.mule.modules</groupId>
        <artifactId>rehusable-service-adapter</artifactId>
        <version>1.0.0-SNAPSHOT</version>
    </dependency>
</dependencies>
----

It is important to notice that your connector's pom inherits from __mule-devkit-parent__, and that each of the other sub-modules inherits from the project parent. Therefore, you will have:

**Pom extra modules**

[source, xml]
----
<artifactId>some-util-lib</artifactId>
<packaging>jar</packaging>

<parent>
    <groupId>org.mule.modules</groupId>
    <artifactId>mule-module-sample-connector-parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
</parent>
...
----

[source, xml]
----
<artifactId>rehusable-service-adapter</artifactId>
<packaging>jar</packaging>

<parent>
    <groupId>org.mule.modules</groupId>
    <artifactId>mule-module-sample-connector-parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
</parent>
...
----

**Connector's pom**

[source, xml]
----
<artifactId>mule-connector-sample</artifactId>
<name>Mule Sample Connector</name>
<packaging>mule-module</packaging>

<parent>
    <groupId>org.mule.tools.devkit</groupId>
    <artifactId>mule-devkit-parent</artifactId>
    <version>3.6.0</version>
</parent>

----

This mix of pom inheritance and agregation allows you to mantain a general parent pom for your secondary modules, and control the compilation in a single point, while leaves the connector with the required devkit-parent pom, making sure that all the other modules will be installed in your local repository before building the connector.

In multi-module projects, the deployment of the artifacts will vary depending on the connector's category. Rule-of-thumb is that the parent pom and all the secondary modules (not the connector module) should be deployed to a public nexus repository, while the connector artifact will override its parent dependency management configuration with its own repository rules.

==== *Avoid caching*
Connectors should not hold state, unless is strictly necessary. Several APIs are actually hosted in cloud environments, and therefore caching states ends up in having untrusted data in the connector.
There are a few cases where the connector might need to save some data of the current API while working on it, which leads into caching.

For those scenarios where the connector needs caching, the following code should be used:

[source,java]
----
// 1) The connector asks for the manager of the Object Store
@Inject
protected ObjectStoreManager objectStoreManager;
----
And then uses the manager to get/create a custom Object Store as follow:
[source,java]
----
// 2) The connector asks Mule for the Object Store represented by a "given ID"
ObjectStore<? extends Serializable> os = objectStoreManager.getObjectStore("given ID");
// 3) The connector uses it
os.store("key", "value");
----

Other ways to achieve caching could be through temporal files, but it might depend on the use case.

==== Avoid spawning threads
Same as caching, spawning threads is not recommended within a connector as a common API lives in the cloud. This means that a connector will not improve its throughput with more threads, because every communication with the API means more HTTP requests/responses. Although we don't recommend using threads, as caching, there might be custom cases where they are actually needed.

For those scenarios where the connector needs to spawn threads you should use a http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html[Executor Service].

==== Reading resources from within the connector
When reading resources that are bundled with the connector, the usual `getClass().getResourceAsStream("custom-file-to-read.txt")` will work. But, if the file `"custom-file-to-read.txt"` can actually be parametrized through the Mule application, then other mechanism should be used.

Let's consider that for your connector, a file can be feeded from the src/main/resources folder (again, this file comes from Studio, not from the connector), the following code should be used:
[source,java]
----
// 1) The connector asks for the manager of the mule context
@Inject
protected MuleContext muleContext;
----
Then reads the resources as follow:
[source,java]
----
ClassLoader classLoader = muleContext.getExecutionClassLoader();
URL resourceURL = classLoader.getResource("custom-file-to-read.txt");
----
Where `"custom-file-to-read.txt"` is the file to be read from the Mule app in `src/main/resources/custom-file-to-read.txt`.

==== Mule dependencies
Adding dependencies in your connector should be carefully considered, since they might collide with Mule.
A few constraints apply, such as:

1. When adding Mule artifacts, always use `<scope>provided</scope>`.
2. When adding artifacts that might collide with Mule, choose versions that are in the current Mule versios, for what your connector is going to work with. Some of those artifacts are: cxf, jersey, spring, guava, etc.

[[_shading]]
==== Shading
For some corner cases, you might need to add a dependency that does collide with Mule either directly or in a transitive dependency. For those scenarios, we strongly recommend to use the same version of the library as Mule does or, if possible, change your library to another one equivalent.
If none of the options above are available, and you still need that custom library that collides with Mule, then shading could work for you. The support for shading has been added in devkit 3.5.3.

You need to modify your connector's `pom.xml` file to add the shading plugin in order to achieve two things: 1) add the custom jar into the connector and 2) rename the packages of the library into a new one in order to avoid collisions.

For simple cases, were the coliding libraries are explicitly declared (for example, you directly require a different jersey version than the one packaged with mule), shade only those dependencies.


The following snippet should work when using a library with the groupId `org.some.library` and the artifactId `custom-artifact-id`
[source, xml]
----
<dependencies>
    <dependency>
        <groupId>org.some.library</groupId>
        <artifactId>custom-artifact-id</artifactId>
        <version>${some.lib.version}</version> <!-- version to be included in the connector jar -->
        <!-- default scope is required-->
    </dependency>
</dependencies>

<!- rest of the configuration -->

<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>2.3</version>
            <configuration>
                <!-- custom shade configuration -->
                <artifactSet>
                    <includes>
                        <include>org.some.library:custom-artifact-id</include>
                    </includes>
                </artifactSet>
                <relocations>
                    <relocation>
                        <pattern>org.some.library</pattern>
                        <shadedPattern>org.some.${some.lib.version}.library</shadedPattern>
                    </relocation>
                </relocations>
             </configuration>
        </plugin>

        <!-- Other plugins -->
    </plugins>
</build>
----

Some other cases are more complex, since the issue appear with a transitive dependency. Let's say you need an sdk `my-sdk` that uses some other dependency `common-lib` internally, if then mule uses an incompatible version of this `common-lib`, Classloader issue might appear.
For this case, you need to shade not only the sdk, but also the transitive dependency, that will now be explicitly declared as follow:

[source, xml]
----
<dependencies>
    <dependency>
        <groupId>org.some.library</groupId>
        <artifactId>custom-artifact-id</artifactId>
        <version>${some.lib.version}</version> <!-- version to be included in the connector jar -->
        <!-- default scope is required-->
    </dependency>

    <dependency>
        <groupId>com.commons.lib</groupId>
        <artifactId>commons-utils</artifactId>
        <version>${common.utils.version}</version> <!-- version used by the sdk -->
        <!-- default scope is required-->
    </dependency>
</dependencies>

<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>2.3</version>
            <configuration>
                <!-- custom shade configuration -->
                <artifactSet>
                    <includes>
                        <include>org.some.library:custom-artifact-id</include>
                        <include>com.commons.lib:commons-utils</include>
                    </includes>
                </artifactSet>
                <relocations>
                    <!-- as a best practice, rename packages using the dependency version-->
                    <relocation>
                        <pattern>org.some.library</pattern>
                        <shadedPattern>org.some.${some.lib.version}.library</shadedPattern>
                    </relocation>
                    <relocation>
                        <pattern>com.commons.lib</pattern>
                        <shadedPattern>com.commons.${common.utils.version}.lib</shadedPattern>
                    </relocation>
                </relocations>
             </configuration>
        </plugin>
    </plugins>
</build>
----

Further explanation regardin maven-shade-plugin can be found http://maven.apache.org/plugins/maven-shade-plugin/examples/includes-excludes.html[here].

==== Connector Structure

If you create your connector project using the DevKit Studio Plugin, the generated project directory layout is the recommended approach.
If you are interested in more details, the project directory structure is described link:files/project-directory-layout.html[here].

In order to provide automatic enforcement of this rules, the following plugin must be configure as part of the connectors pom.xml. We will be responsible for validating the project structure.

Copy and paste the following snippets in your connector pom.xml:

[source,xml]
----
<build>
    ...
    <plugins>
        ...
       <plugin>
            <groupId>org.mule.certification</groupId>
            <artifactId>project-structure-validation</artifactId>
            <version>1.0.5</version>
            <executions>
                <execution>
                    <phase>package</phase>
                    <goals>
                        <goal>validate</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
        ...
    </plugins>
    ...
</build>
----


