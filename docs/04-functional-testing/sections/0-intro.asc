[[_intro]]

==== Tests organization

Integration tests need to be organized as follows:

. *Naming convention:* integration test classes must end with _IT_. Alternatives ending names are discouraged, and will require a special configuration for them to be run.
. *Test suites* and *Test Categories* might be used if needed, although are discouraged.
. The following package organization is encouraged:
    - *org.mule.modules.<connector-project>.automation.functional* for integration tests that make use of the Connector Testing Framework.
    - *org.mule.modules.<connector-project>.automation.system* for all those tests that require a connection but do not use CTF.

// Not sure how this works with Gast√≥n's runner.
// TIP: When not using test categories, a test suite might use *@RunWith(Suite.class)* before the list of classes within the suite itself. Thus, all listed test classes are executed and any test category is needed.


==== Test Data

Test data must be contained within a _org.mule.modules.<connector-project>.automation.functional.TestDataBuilder.java_ class. This test data builder must generate all necessary test data for every single functional test. Developers are free to use whatever data input techniques within this data builder (JSON, Beans, etc.).

It is advisable to avoid binding test data with test cases and keep all test data generation within the test data builder.

==== Connector Testing Framework

The main objective is to test the connector with different Mule runtime environments through the Connector Testing Framework, allowing to detect possible conflicts, such as class loading issues. The default functional testing framework is called CTF (_Connector Testing Framework_). Documentation of CTF is available http://mulesoft.github.io/connector-testing-framework/[here]

This framework eases the creation of connector functional tests, where the developer is not necessarily involved with Mule's internals, such as flows, configurations and Spring beans. The objective of this framework is twofold. On the one hand, we decouple how Mule works and how functional tests are written. On the other hand, we enable a runtime platform to run connector tests with multiple Mule versions by executing the tests in remote Mule instances, achieving a decoupled runtime environment.

Any other approach for carrying out functional tests is highly discouraged. However, certain aspects of functional testing is not covered within CTF and thus custom approaches might be used. The following sections described which aspects can and can not be tested with CTF.
