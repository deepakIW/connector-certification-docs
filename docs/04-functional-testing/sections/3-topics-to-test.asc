[[_test_methods]]
==== Topics to Test using CTF

CTF enables testing of the following aspects:

1. *Processors*
2. *MetaData*
3. *WSDL Operations*
4. *Pagination*

TIP: We will use throughout these examples the _CookBook Connector_, a test connector available http://mulesoft.github.io/mule-cookbook-tutorial/[here]. We will not consider a <ConnectorName>TestCase and therefore every test case will extend directly from AbstractTestCase.

===== Testing Processors

CTF enables testing of processors in a simple manner. By means of a mocked connector, we can call every connector operation with its actual parameters, without dealing with Mule internals (Spring beans, Mule flows, etc.).

Let's consider one of the available processors within CookBook Connector, _getRecentlyAdded_. A functional test will be:

[source,java]
----
import ...
import org.mule.tools.devkit.ctf.junit.AbstractTestCase;

public class GetRecentlyAddedTestCases extends AbstractTestCase<CookBookConnector> {

  //No @Before or @After methods required

	@Test
	public void testGetRecentlyAdded() throws Exception{

    List<Recipe> resultList = getConnector().getRecentlyAdded();

    //Assert on resultList
	}
}
----

The method _getConnector()_ returns an instance of the actual connector under test, allowing to invoke its operations with its parameters. In this particular case, _getRecentlyAdded_ does not require any parameters.


===== Testing MetaData

_Anypoint Studio DataSense_ allows a connector to gather metadata from the remote service in design time, enabling Anypoint developers to deal with actual object types and descriptions instead of generic types.

A single metadata class *per MetaDataCategory* is accepted, named as _<CategoryName>MetaDataTestCases_, which will include two tests: _testMetaDataKeys_ and _testMetaData_ for that specific category. CTF provides _getDispatcher()_, which exposes two methods for fetching MetaDataKeys and MetaData, *fetchMetaDataKeys()* and *fetchMetaData(keyName)*. The first one fetches all keys from the MetaData underlying service, while the second one retrieves the descriptor for a particular MetadataKey.

[source,java]
----
import ...
import org.mule.tools.devkit.ctf.junit.AbstractTestCase;

public class CookBookMetadataCategoryMetaDataTestCases extends AbstractTestCase<CookBookConnector> {

	@Test
	@MetaDataTest
	public void testMetaDataKeys() throws Exception{

    	Result<List<MetaDataKey>> metaDataKeysResult = dispatcher.fetchMetaDataKeys();
			assertTrue(Result.Status.SUCCESS.equals(metaDataKeysResult.getStatus()));

      List<MetaDataKey> metaDataKeys = metaDataKeysResult.get();

      MetaDataKey recipeKey;
      MetaDataKey ingredientKey;

	    for (MetaDataKey key : metaDataKeys) {
	    	if (recipeKey == null && key.getId().equals("Recipe"))
	    		recipeKey = key;
	    	if (ingredientKey == null && key.getId().equals("Ingredient"))
	    		ingredientKey = key;
	    }

      //Assert on MetaDataKeys
	    assertNotNull(recipeKey);
	    assertNotNull(ingredientKey);
	}

  @Test
	@MetadataTest
	public void testMetaData() throws Exception{

    	Result<List<MetaDataKey>> metaDataKeysResult = dispatcher.fetchMetaDataKeys();
			assertTrue(Result.Status.SUCCESS.equals(metaDataKeysResult.getStatus()));

      List<MetaDataKey> metaDataKeys = metaDataKeysResult.get();

      MetaDataKey recipeKey;
      MetaDataKey ingredientKey;

	    for (MetaDataKey key : metaDataKeys) {
	    	if (recipeKey == null && key.getId().equals("Recipe"))
	    		recipeKey = key;
	    	if (ingredientKey == null && key.getId().equals("Ingredient"))
	    		ingredientKey = key;
	    }

      //Asserts on MetaData
	    Result<MetaData> recipeKeyResult = dispatcher.fetchMetaData(recipeKey);
			assertTrue(Result.Status.SUCCESS.equals(recipeKeyResult.getStatus()));

			Result<MetaData> ingredientKeyResult = dispatcher.fetchMetaData(ingredientKey);
			assertTrue(Result.Status.SUCCESS.equals(ingredientKeyResult.getStatus()));
	}
}
----

IMPORTANT: All metadata tests need to be annotated with @MetaDataTest. This assures that metadata tests are only executed in the latest Mule Runtime.

===== Testing MetaData: Preferred Testing Approach for Complex Domains

When the domain of the connector is complex and its entities contain large and deep object structures, MetaData tests might end up being long, complicate to read and they might not even test the entire MetaData description.

To deal with this scenario, the following approach is highly recommended:

1. Naming conventions is maintained, where a single metadata class *per MetaDataCategory* is accepted, named as _<CategoryName>MetaDataTestCases_.
2. A MetaData abstract parent is introduced, named as _AbstractMetaDataTestCase.java_ available within CTF packages. This method need to be parametrized with the connector class.
3. Every _<CategoryName>MetaDataTestCases_ need to extend from _AbstractMetaDataTestCase_ and defines which keys/entities must be tested as follows:

[source,java]
----
import ...
import org.mule.tools.devkit.ctf.junit.AbstractMetaDataTestCase;
import java.util.ArrayList;
import java.util.List;

public class CookBookMetaDataCategoryMetaDataTestCases extends AbstractMetaDataTestCase<CookBookConnector> {

    private static final List<String> keys = new ArrayList<String>();

    static {
        keys.add("Recipe");
        keys.add("Ingredient");
    }

    public <CategoryName>MetaDataTestCases() {
        super(keys, CookBookMetaDataCategory.class, CookBook.class);
    }
}
----

Thus, every metadata test case defines within its category the important entities to test. The underlying implementation will only tests those categories and compare the results of the MetaData retrieved from the sandbox with JSON-based structures keep within the connector test resources. These structures are created the first time the test is ran and kept afterwards for future test executions.

===== Testing WSDL Operation

Testing WSDL operations is easily supported by CTF. WSDL operations consume WSDL files mapped as XMLStreamReader files, which must be generated within the TestDataBuilder as usual.

IMPORTANT: Testing WSDL operations is only required when the connector under test is a SOAP Connect-based connector, opposite to a SDK-based connector.

A single WSDL test case is accepted and need to be named as _WSDLTestCases_. Since WSDL testing consume WSDL files, they must be organized as follows:

. _src/test/resources/payloads.xml:_ A directory that must contain all required WSDL/XML files, which are consumed by the TestDataBuilder.
. _WSDL_ID#Operation:_ Every WSDL/XML file must be named as the WSDL ID following the separator _#_ and ending with the operation name.

Testing WSDL operations is supported by means of the following method:

[source,java]
----
import ...
import org.mule.tools.devkit.ctf.junit.AbstractTestCase;

public class WSDLTestCases extends AbstractTestCase<CookBookConnector> {

    @Test
    public void testWSDL<OperationName>() throws Exception {

        XMLStreamReader request = TestDataBuilder.getXMLStreamReaderForAParticularWSDL();

        ConnectorDispatcher<CookBookConnector> dispatcher = getDispatcher();

        XMLStreamReader XMLStreamResult = dispatcher.invokeWsdlOperation(request, "<WSDL_ID>", "<OperationName>");

        //Asserts on XMLStreamResult
    }
----

This is a simple example illustrating how CTF supports WSDL operations with a single method. The first parameter is the XMLStreamReader input based on a specific WSDL/XML. The second argument is the WSDL_ID to be used, while the last one stands for the operation name. If your connector does not include multiple service definitions, you need to opt for using the variant of the method without the WSDL_ID as follows:

[source,java]
----
import ...
import org.mule.tools.devkit.ctf.junit.AbstractTestCase;

public class WSDLTestCases extends AbstractTestCase<CookBookConnector> {

    @Test
    public void testWSDL<OperationName>() throws Exception {

        XMLStreamReader request = TestDataBuilder.getXMLStreamReaderForAParticularTest();

        ConnectorDispatcher<CookBookConnector> dispatcher = getDispatcher();

        XMLStreamReader XMLStreamResult = dispatcher.invokeWsdlOperation(request, "<OperationName>");

        //Asserts on XMLStreamResult
    }
----


===== @Paginated methods

A connector method can be annotated as @Paged, which means that when calling that method, several calls to the underlying API will be generated so as to avoid retrieving a possible big set of results in one API call. As a result, the user will consume the entire set of results with a single call to the method, although Mule will automatically generate different API calls.

Let's consider the _queryPaginated(..)_ method within the CookBook connector, which is annotated as @Paged and defined as:

[source,java]
----
@Processor
   @ReconnectOn(exceptions = { SessionExpiredException.class })
   @Paged
   public ProviderAwarePagingDelegate<Map<String, Object>, CookbookConnector> queryPaginated(
           final String query, final PagingConfiguration pagingConfiguration)
           throws SessionExpiredException {
       return new CookbookPagingDelegate(query, pagingConfiguration.getFetchSize());
   }
----

In order to test this paginated, CTF enables the following mechanism:

[source,java]
----
import ...
import org.mule.tools.devkit.ctf.junit.AbstractTestCase;

public class QueryPaginatedTestCases extends AbstractTestCase<CookBookConnector> {

  //No @Before or @After methods required

	@Test
	public void testQueryPaginated() throws Exception{

		Object[] args = new Object[] { "SELECT Id FROM Recipes", null };

		Collection<Map<String, Object>> listResult = (Collection<Map<String, Object>>) dispatcher.runPaginatedMethod("queryPaginated", args);

    //Assert on listResult
	}
}
----

This test extract illustrates how pagination works. If we try to execute connector.queryPaginated(...), a runtime exception *UnsupportedMethodAnnotationException* will be thrown by CTF. We need to used the dispatcher instead, which exposes a *runPaginatedMethod(methodName, args)*. The first parameter is the method name (camel-like), while the second is the list of parameter taken by the method in the same order as defined in its signature. In this case the first parameter is the query itself, while the last parameter, a PagingConfiguration object, is not present.

TIP: We provide a mechanism to test operations annotated with @Paged, which indirectly tests the underlying pagination mechanism. However, testing how the pagination mechanisms works, _i.e._ testing the number of pages retrieved and the values within each page should not be performed with the testing framework, since most likely it is a unit test and not a functional test.
